#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

CONFIG_PATH=/var/vcap/jobs/jenkins-master/config
REPO_ENABLED="<%= p('jenkins.config.repo.enabled') %>"

source /var/vcap/jobs/jenkins-master/data/properties.sh
mkdir -p /var/vcap/store/jenkins-master

echo "Merging jenkins.config.initial with Jenkins CasC file..."
/var/vcap/packages/spruce/bin/spruce merge \
  /var/vcap/jobs/jenkins-master/config/jenkins_config.yml \
  /var/vcap/jobs/jenkins-master/config/initial_config.yml \
  > /var/vcap/data/jenkins-master/jenkins_config.yml

echo
echo "Initial config:"
cat /var/vcap/data/jenkins-master/jenkins_config.yml
echo

if [[ ${REPO_ENABLED} == "true" ]]; then
  CONFIG_PATH=/var/vcap/data/jenkins-master/config
  /var/vcap/jobs/jenkins-master/bin/process-configuration-repo
fi

if [[ -e /var/vcap/store/jenkins-master/config.xml ]]; then
  echo "Removing stale config.xml file..."
  rm -f /var/vcap/store/jenkins-master/config.xml
fi

echo "Copying Jenkins CasC dile to Jenkins home directory..."
cp /var/vcap/data/jenkins-master/jenkins_config.yml /var/vcap/store/jenkins-master/jenkins_config.yml

# Remove any existing groovy init scripts
if [[ -d /var/vcap/store/jenkins-master/init.groovy.d ]]; then
  rm -rf /var/vcap/store/jenkins-master/init.groovy.d
fi

# Install new groovy init scripts
if [[ -d ${CONFIG_PATH}/init.groovy.d ]]; then
    echo "Copying init.groovy.d scripts to Jenkins home directory..."
    mkdir -p /var/vcap/store/jenkins-master/init.groovy.d
    cp ${CONFIG_PATH}/init.groovy.d/*.groovy /var/vcap/store/jenkins-master/init.groovy.d/
fi

# Handle plugins
mkdir -p /var/vcap/store/jenkins-master/plugins
if [[ -f ${CONFIG_PATH}/plugins.txt ]]; then
  echo "Installing Plugins..."
  /var/vcap/jobs/jenkins-master/bin/install-plugins < ${CONFIG_PATH}/plugins.txt
fi

# Disable plugins specified at runtime
# TODO: Should disable/or remove plugins that aren't specified in plugins.txt
OLDIFS=$IFS
IFS=$'\n'
DISABLEDPLUGINS=(<%= p('jenkins.plugins.disabled') %>)
IFS=$OLDIFS
for (( i=0; i<${#DISABLEDPLUGINS[@]}; i++ )); do
    echo "Disabling ${DISABLEDPLUGINS[$i]} plugin"
    touch /var/vcap/store/jenkins-master/plugins/${DISABLEDPLUGINS[$i]}.jpi.disabled
done

# Always disabled plugin list (e.g. unsupported in this deployment)
touch /var/vcap/store/jenkins-master/plugins/windows-slaves.jpi.disabled

# Remove any existing User Content
if [[ -d /var/vcap/store/jenkins-master/userContent ]]; then
  rm -rf /var/vcap/store/jenkins-master/userContent
fi

# Copy User Content
if [[ -d ${CONFIG_PATH}/userContent ]]; then
  echo "Copying UserContent..."
  mkdir -p /var/vcap/store/jenkins-master/userContent
  cp -R ${CONFIG_PATH}/userContent/* /var/vcap/store/jenkins-master/userContent
fi

chown vcap:vcap -R /var/vcap/store/jenkins-master
